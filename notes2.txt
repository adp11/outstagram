


// await createUserWithEmailAndPassword(auth, userAuthInfo.email, userAuthInfo.password);
// if (/^\/p\//.test(window.location.pathname)) {
//   setIsFullPostActive(true);
//   setAbruptPostView(`uid_${getAuth().currentUser.uid}`);
// }



// async function logInProvider() {
  //   const provider = new GoogleAuthProvider();
  //   await signInWithPopup(getAuth(), provider);
  //   const { uid, displayName, photoURL } = getAuth().currentUser;
  //   if (/^\/p\//.test(window.location.pathname)) {
  //     setIsFullPostActive(true);
  //     setAbruptPostView(`uid_${uid}`);
  //   }
  //   // If first time logged in, initialize Field Values in Firestore db
  //   const docRef = doc(db, `users/uid_${uid}`);
  //   const docSnap = await getDoc(docRef);
  //   if (!docSnap.exists()) {
  //     await setDoc(doc(db, `users/uid_${uid}`), {
  //       uid: `uid_${uid}`,
  //       username: `u_${uid}`,
  //       displayName,
  //       photoURL,
  //       bio: "",
  //       totalPosts: 0,
  //       totalNotifs: 0,
  //       totalChatNotifs: 0,
  //       postSnippets: [],
  //       followers: [],
  //       following: [],
  //     });
  //   }
  //   setIsLoggedIn(true);
  // }


check all features/ real app flow rigorous test with 3 users - DONE
add jwt - DONE
add GoogleAuth - DONE
check backend design, API principles, error handle logic
check socket/real time stuff (stuff that got added later)

deploy/production (heroku, backend compatible (port, URL), firebase/mongo refresh, .env)
presentation (on Github, on URL itself, on personal website, demo/visitor's perspective)
remove unused npm pkgs to be lightweight